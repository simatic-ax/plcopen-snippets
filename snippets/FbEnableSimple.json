{
    "Insert PLCopen BlocksTemplates": {
    "scope": "javascript,typescript,st",
    "prefix": ["fb enable, 1_simple"],
    "body": [
        
        "FUNCTION_BLOCK ${TM_FILENAME/(.*)\\..+$/$1/}",

        "\t",
        "\tVAR_INPUT",
        "\t\tenable : Bool;   //  TRUE: Enable functionality of FB",      
        "\tEND_VAR",

        "\t",
        "\tVAR_OUTPUT",
        "\t\tvalid : Bool;   //  TRUE: Valid set of output values available at the FB",        
        "\t\tbusy : Bool;   //  TRUE: FB is not finished and new output values can be expected",
        "\t\terror : Bool;   //  TRUE: An error occurred during the execution of the FB",
        "\t\tstatus : Word := STATUS_NO_CALL;   //  WORD0000 - WORD7FFF: Status of the FB, WORD8000 - WORDFFFF: Error identification",
        "\tEND_VAR",

        "\t",
        "\tVAR",
        "\t\tstatEnableOld : Bool;   //  Old value of 'enable' input for edge detection",
        "\t\tstatValid : Bool;   //  Static value for output 'valid'",
        "\t\tstatBusy : Bool;   //  Static value for output 'busy'",
        "\t\tstatError : Bool;   //  Static value for output 'error'",
        "\t\tstatErrorUserCleared : Bool;   //  Error occurred that can only be solved by user; rising edge at enable input necessary",
        "\t\tstatErrorAutoCleared : Bool;   //  Error occurred that can be acknowledged by FB",
        "\t\tstatStatus : Word := STATUS_NO_CALL;   //  Static value for output 'status'",
        "\t\tstatFBState : DInt := FB_STATE_NO_PROCESSING;   //  State in the state machine of the FB",
        "\t\tstatDisablingCompleted : Bool;   //  TRUE: Disabling has been completed ",
        "\tEND_VAR",

        "\t",
        "\tVAR_TEMP",
        "\t\ttempEnable : Bool;   //  Temporary value for input 'enable'",        
        "\tEND_VAR",

        "\t",
        "\tVAR CONSTANT",
        "\t\tFB_STATE_NO_PROCESSING : DInt := 0;   //  FB state: No processing",
        "\t\tFB_STATE_ENABLING : DInt := 10;   //  FB state: Enabling",
        "\t\tFB_STATE_PROCESSING : DInt := 50;   //  FB state: Processing",
        "\t\tFB_STATE_DISABLING : DInt := 90;   //  FB state: Disabling",
        "\t\tSTATUS_NO_CALL : Word := WORD#16#7000;   //  No job being currently processed",
        "\t\tSTATUS_FIRST_CALL : Word := WORD#16#7001;   //  First call after incoming new job (rising edge 'enable')",
        "\t\tSTATUS_SUBSEQUENT_CALL : Word := WORD#16#7002;   //  Subsequent call during active processing without further details",
        "\t\tERR_UNDEFINED_STATE : Word := WORD#16#8600;   //  Error: due to an undefined state in state machine",
        "\t\tERR_IN_BLOCK_OPERATION : Word := WORD#16#8001;   //  Error: Wrong operation of the function block",
        "\t\tERR_PARAMETRIZATION : Word := WORD#16#8200;   //  Error: during parameterization",
        "\t\tERR_PROCESSING_EXTERN : Word := WORD#16#8400;   //  Error: when processing from outside (e. g. wrong I/O signals, axis not referenced)",
        "\t\tERR_PROCESSING_INTERN : Word := WORD#16#8600;   //  Error: when processing internally (e. g. when calling a system function)",
        "\t\tERR_AREA_RESERVED : Word := WORD#16#8800;   //  Error: Reserved area",
        "\t\tERR_USER_DEFINED_CLASSES : Word := WORD#16#9000;   //  Error: User-defined error classes",       
        "\tEND_VAR",

        "${C:",
	    "\t//===============================================================================",
	    "\t// (company) / (c)Copyright (year)",
	    "\t//-------------------------------------------------------------------------------",
	    "\t// Title:            (Title of this Block / Enable Template)",
	    "\t// Comment/Function: (that is implemented in the block)",
	    "\t//                   (Template for an FB with Enable / Valid handling based on PLCopen standard 'Function Blocks for Motion Control' V2.0)",
	    "\t// Library/Family:   (that the source is dedicated to)",
	    "\t// Author:           (department / person in charge / contact)",
	    "\t// Tested with:      (test system with version)",
	    "\t// Engineering:      SIMATIC AX (SDK version)",
	    "\t// Restrictions:     (OB types, etc.)",
	    "\t// Requirements:     (hardware, technological package, memory needed, etc.)",
	    "\t//-------------------------------------------------------------------------------",
	    "\t// Change log table:",
	    "\t// Version  | Date       | Expert in charge       | Changes applied",
	    "\t//----------|------------|------------------------|------------------------------",
	    "\t// 01.00.00 | yyyy-mm-dd | (name of expert)       | First released version",
	    "\t//===============================================================================","}",

        "${C:",
        "    tempEnable := enable; // Work with temporary value / create process image",
        "      ",
        "    IF (tempEnable = TRUE) AND (statStatus = STATUS_NO_CALL) THEN // Enable FB",
        "      // First call; initialize FB",
        "      statValid := TRUE;",
        "      statBusy := TRUE;",
        "      statError := FALSE;",
        "      statStatus := STATUS_FIRST_CALL;",
        "      statErrorUserCleared := FALSE;",
        "      statErrorAutoCleared := FALSE;",
        "      statDisablingCompleted := FALSE;",
        "      // State machine - start functionality",
        "      statFBState := FB_STATE_ENABLING;",
        "      ",
        "      // TODO: Initialize functionality: reset of variables, diagnostics, etc.",
        "      ",
        "      // TODO: Initialize functionality: call subsidiary FBs with FALSE",
        "      //      instFB(execute := FALSE);",
        "      ",
        "    ELSIF (tempEnable = FALSE) AND (statEnableOld = TRUE) THEN // Disable FB ",
        "      statFBState := FB_STATE_DISABLING;",
        "      ",
        "    ELSIF (statStatus = STATUS_FIRST_CALL) THEN // Set status identifier of subsequent call",
        "      statStatus := STATUS_SUBSEQUENT_CALL;",
        "    END_IF;",
        "    ",
        "    // Edge detection 'enable' input",
        "    statEnableOld := tempEnable;",
        "  ",
        "    IF (statStatus = STATUS_NO_CALL) THEN // Nothing to do -> End here to reduce system load",
        "      RETURN;",
        "    END_IF;",
        "  ",
        "    CASE statFBState OF // State machine of FB",
        "      FB_STATE_NO_PROCESSING:",
        "          // No processing active (Note: this state must always be present and left empty)",
        "          ;",
        "        ",
        "      FB_STATE_ENABLING: // Enabling active",
        "          // TODO: Use this state for application specific code, e.g. set preconditions of further processing (establish connections, etc.)",
        "          // Call subsidiary FB or functionality",
        "          //          instFB(execute := TRUE);",
        "          //          IF (instFB.done = TRUE) THEN // Subsidiary FB finished successfully",
        "          //            // Continue processing with next state e.g. statFBState := FB_STATE_PROCESSING;",
        "          //",
        "          //          ELSIF (instFB.error = TRUE) THEN // Error occurred in subsidiary FB",
        "          //            // If the error occurred needs separate handling (e.g. close connection)",
        "          //            // please set the error output only when this error handling completed successfully",
        "          //            statStatus := ERR_XYZ; // Set correct status that identifies error clearly",
        "          //            statErrorAutoCleared OR statErrorUserCleared // Set error type",
        "          //            // TODO: Error handling",
        "          //          END_IF;",
        "          //",
        "          //          // TODO: Set statErrorAutoCleared := FALSE if autocleared is acknowledged",
        "          ;",
        "        ",
        "      FB_STATE_PROCESSING: // Processing active",
        "          // Further processing state",
        "          // TODO: Use this state for further application specific code",
        "          ;",
        "        ",
        "      FB_STATE_DISABLING: // Disabling active",
        "          // TODO: Disabling, e.g. closing connections, etc.",
        "          // When disabling is complete the bit statDisablingCompleted must be set",
        "          statDisablingCompleted := TRUE;",
        "        ",
        "    ELSE // Undefined state in state machine reached",
        "        statStatus := ERR_UNDEFINED_STATE;",
        "        statErrorUserCleared := TRUE;",
        "    END_CASE;",
        "  ",
        "    // Write outputs",
        "    IF (statDisablingCompleted = TRUE) THEN",
        "        // Reset outputs if disabling completed",
        "        statValid := FALSE;",
        "        statBusy := FALSE;",
        "        statError := FALSE;",
        "        statErrorUserCleared := FALSE;",
        "        statErrorAutoCleared := FALSE;",
        "        statStatus := STATUS_NO_CALL;",
        "        // TODO: Reset application specific outputs",
        "      ",
        "    ELSIF (statErrorUserCleared = TRUE) AND (statError = FALSE) THEN",
        "        // Error can only be cleared by user; rising edge at enable input is needed to continue ",
        "        statValid := FALSE;",
        "        statBusy := FALSE;",
        "        statError := TRUE;",
        "        // execution aborted --> set state no processing",
        "        statFBState := FB_STATE_NO_PROCESSING;",
        "      ",
        "    ELSIF (statErrorAutoCleared = TRUE) AND (statError = FALSE) THEN",
        "        // Error can be reset by FB automatically  ",
        "        statValid := FALSE;",
        "        statBusy := TRUE;",
        "        statError := TRUE;",
        "        // TODO: Handling of autocleared error",
        "      ",
        "    ELSIF (statErrorAutoCleared = FALSE) AND (statErrorUserCleared = FALSE) AND (statError = TRUE) THEN",
        "        // If autocleared error is acknowledged",
        "        statValid := TRUE;",
        "        statBusy := TRUE;",
        "        statError := FALSE;",
        "        // TODO: remove this line if more detailed status information is used instead of STATUS_SUBSEQUENT_CALL",
        "        statStatus := STATUS_SUBSEQUENT_CALL;",
        "    END_IF;",
        "    ",
        "    // Write static values to outputs",
        "    valid := statValid;",
        "    busy := statBusy;",
        "    error := statError;",
        "    status := statStatus;",
        "    // TODO: Write application specific static values to outputs",
        "}",

        "END_FUNCTION_BLOCK"         
    ],
    "description": "[PLCOPEN-SNIPPETS] FB with enable (Simple)"
    }
}