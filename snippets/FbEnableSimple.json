{
    "Insert PLCopen BlocksTemplates": {
    "scope": "st",
    "prefix": ["fb, plcopen, enable, 1_simple"],
    "body": [
        
        "FUNCTION_BLOCK ${1:YourFbEnableSimple}",
        "\t// TODO please personalize block(name)",

        "\t",
        "\tVAR_INPUT",
        "\t\tenable : BOOL;   //  TRUE: Enable functionality of FB",      
        "\tEND_VAR",

        "\t",
        "\tVAR_OUTPUT",
        "\t\tvalid : BOOL;   //  TRUE: Valid set of output values available at the FB",        
        "\t\tbusy : BOOL;   //  TRUE: FB is not finished and new output values can be expected",
        "\t\terror : BOOL;   //  TRUE: An error occurred during the execution of the FB",
        "\t\tstatus : WORD := STATUS_NO_CALL;   //  WORD#0000 - WORD#7FFF: Status of the FB, WORD#8000 - WORD#FFFF: Error identification",
        "\tEND_VAR",

        "\t",
        "\tVAR",
        "\t\t_enableOld : BOOL;   //  Old value of 'enable' input for edge detection",
        "\t\t_valid : BOOL;   //  Static value for output 'valid'",
        "\t\t_busy : BOOL;   //  Static value for output 'busy'",
        "\t\t_error : BOOL;   //  Static value for output 'error'",
        "\t\t_errorUserCleared : BOOL;   //  Error occurred that can only be solved by user; rising edge at enable input necessary",
        "\t\t_errorAutoCleared : BOOL;   //  Error occurred that can be acknowledged by FB",
        "\t\t_status : WORD := STATUS_NO_CALL;   //  Static value for output 'status'",
        "\t\t_fbState : FbStates;   //  State in the state machine of the FB",
        "\t\t_disablingCompleted : BOOL;   //  TRUE: Disabling has been completed ",
        "\tEND_VAR",

        "\t",
        "\tVAR_TEMP",
        "\t\ttempEnable : BOOL;   //  Temporary value for input 'enable'",        
        "\tEND_VAR",

        "\t",
        "\tVAR CONSTANT",
        "\t\tSTATUS_NO_CALL : WORD := WORD#16#7000;   //  No job being currently processed",
        "\t\tSTATUS_FIRST_CALL : WORD := WORD#16#7001;   //  First call after incoming new job (rising edge 'enable')",
        "\t\tSTATUS_SUBSEQUENT_CALL : WORD := WORD#16#7002;   //  Subsequent call during active processing without further details",
        "\t\tERR_UNDEFINED_STATE : WORD := WORD#16#8600;   //  Error: due to an undefined state in state machine",
        "\t\tERR_IN_BLOCK_OPERATION : WORD := WORD#16#8001;   //  Error: Wrong operation of the function block",
        "\t\tERR_PARAMETRIZATION : WORD := WORD#16#8200;   //  Error: during parameterization",
        "\t\tERR_PROCESSING_EXTERN : WORD := WORD#16#8400;   //  Error: when processing from outside (e. g. wrong I/O signals, axis not referenced)",
        "\t\tERR_PROCESSING_INTERN : WORD := WORD#16#8600;   //  Error: when processing internally (e. g. when calling a system function)",
        "\t\tERR_AREA_RESERVED : WORD := WORD#16#8800;   //  Error: Reserved area",
        "\t\tERR_USER_DEFINED_CLASSES : WORD := WORD#16#9000;   //  Error: User-defined error classes",       
        "\tEND_VAR",

        "${C:",
	    "\t//===============================================================================",
	    "\t// (company) / (c)Copyright (year)",
	    "\t//-------------------------------------------------------------------------------",
	    "\t// Title:            (Title of this Block / Enable Template)",
	    "\t// Comment/Function: (that is implemented in the block)",
	    "\t//                   (Template for an FB with Enable / Valid handling based on PLCopen standard 'Function Blocks for Motion Control' V2.0)",
	    "\t// Library/Family:   (that the source is dedicated to)",
	    "\t// Author:           (department / person in charge / contact)",
	    "\t// Tested with:      (test system with version)",
	    "\t// Engineering:      SIMATIC AX (SDK version)",
	    "\t// Restrictions:     (OB types, etc.)",
	    "\t// Requirements:     (hardware, technological package, memory needed, etc.)",
	    "\t//-------------------------------------------------------------------------------",
	    "\t// Change log table:",
	    "\t// Version  | Date       | Expert in charge       | Changes applied",
	    "\t//----------|------------|------------------------|------------------------------",
	    "\t// 01.00.00 | yyyy-mm-dd | (name of expert)       | First released version",
	    "\t//===============================================================================","}",

        "${C:",
        "    tempEnable := enable; // Work with temporary value / create process image",
        "      ",
        "    IF (tempEnable = TRUE) AND (_status = STATUS_NO_CALL) THEN // Enable FB",
        "      // First call; initialize FB",
        "      _valid := TRUE;",
        "      _busy := TRUE;",
        "      _error := FALSE;",
        "      _status := STATUS_FIRST_CALL;",
        "      _errorUserCleared := FALSE;",
        "      _errorAutoCleared := FALSE;",
        "      _disablingCompleted := FALSE;",
        "      // State machine - start functionality",
        "      _fbState := FbStates#ENABLING;",
        "      ",
        "      // TODO: Initialize functionality: reset of variables, diagnostics, etc.",
        "      ",
        "      // TODO: Initialize functionality: call subordinated FBs with FALSE",
        "      //      instFB(execute := FALSE);",
        "      ",
        "    ELSIF (tempEnable = FALSE) AND (_enableOld = TRUE) THEN // Disable FB ",
        "      _fbState := FbStates#DISABLING;",
        "      ",
        "    ELSIF (_status = STATUS_FIRST_CALL) THEN // Set status identifier of subsequent call",
        "      _status := STATUS_SUBSEQUENT_CALL;",
        "    END_IF;",
        "    ",
        "    // Edge detection 'enable' input",
        "    _enableOld := tempEnable;",
        "  ",
        "    IF (_status = STATUS_NO_CALL) THEN // Nothing to do -> End here to reduce system load",
        "      RETURN;",
        "    END_IF;",
        "  ",
        "    CASE _fbState OF // State machine of FB",
        "      FbStates#NO_PROCESSING:",
        "          // No processing active (Note: this state must always be present and left empty)",
        "          ;",
        "        ",
        "      FbStates#ENABLING: // Enabling active",
        "          // TODO: Use this state for application specific code, e.g. set preconditions of further processing (establish connections, etc.)",
        "          // Call subordinated FB or functionality",
        "          //          instFB(execute := TRUE);",
        "          //          IF (instFB.done = TRUE) THEN // Subsidiary FB finished successfully",
        "          //            // Continue processing with next state e.g. _fbState := FbStates#PROCESSING;",
        "          //",
        "          //          ELSIF (instFB.error = TRUE) THEN // Error occurred in subordinated FB",
        "          //            // If the error occurred needs separate handling (e.g. close connection)",
        "          //            // please set the error output only when this error handling completed successfully",
        "          //            _status := ERR_XYZ; // Set correct status that identifies error clearly",
        "          //            _errorAutoCleared OR _errorUserCleared // Set error type",
        "          //            // TODO: Error handling",
        "          //          END_IF;",
        "          //",
        "          //          // TODO: Set _errorAutoCleared := FALSE if autocleared is acknowledged",
        "          ;",
        "        ",
        "      FbStates#PROCESSING: // Processing active",
        "          // Further processing state",
        "          // TODO: Use this state for further application specific code",
        "          ;",
        "        ",
        "      FbStates#DISABLING: // Disabling active",
        "          // TODO: Disabling, e.g. closing connections, etc.",
        "          // When disabling is complete the bit _disablingCompleted must be set",
        "          _disablingCompleted := TRUE;",
        "        ",
        "    ELSE // Undefined state in state machine reached",
        "        _status := ERR_UNDEFINED_STATE;",
        "        _errorUserCleared := TRUE;",
        "    END_CASE;",
        "  ",
        "    // Write outputs",
        "    IF (_disablingCompleted = TRUE) THEN",
        "        // Reset outputs if disabling completed",
        "        _valid := FALSE;",
        "        _busy := FALSE;",
        "        _error := FALSE;",
        "        _errorUserCleared := FALSE;",
        "        _errorAutoCleared := FALSE;",
        "        _status := STATUS_NO_CALL;",
        "        // TODO: Reset application specific outputs",
        "      ",
        "    ELSIF (_errorUserCleared = TRUE) AND (_error = FALSE) THEN",
        "        // Error can only be cleared by user; rising edge at enable input is needed to continue ",
        "        _valid := FALSE;",
        "        _busy := FALSE;",
        "        _error := TRUE;",
        "        // execution aborted --> set state no processing",
        "        _fbState := FbStates#NO_PROCESSING;",
        "      ",
        "    ELSIF (_errorAutoCleared = TRUE) AND (_error = FALSE) THEN",
        "        // Error can be reset by FB automatically  ",
        "        _valid := FALSE;",
        "        _busy := TRUE;",
        "        _error := TRUE;",
        "        // TODO: Handling of autocleared error",
        "      ",
        "    ELSIF (_errorAutoCleared = FALSE) AND (_errorUserCleared = FALSE) AND (_error = TRUE) THEN",
        "        // If autocleared error is acknowledged",
        "        _valid := TRUE;",
        "        _busy := TRUE;",
        "        _error := FALSE;",
        "        // TODO: remove this line if more detailed status information is used instead of STATUS_SUBSEQUENT_CALL",
        "        _status := STATUS_SUBSEQUENT_CALL;",
        "    END_IF;",
        "    ",
        "    // Write static values to outputs",
        "    valid := _valid;",
        "    busy := _busy;",
        "    error := _error;",
        "    status := _status;",
        "    // TODO: Write application specific static values to outputs",
        "}",

        "END_FUNCTION_BLOCK"         
    ],
    "description": "[PLCOPEN-SNIPPETS] FB with enable (Simple)"
    }
}