{
    "Insert PLCopen BlocksTemplates": {
    "scope": "javascript,typescript,st",
    "prefix": ["fb execute, 1_simple"],
    "body": [
        
        "FUNCTION_BLOCK ${TM_FILENAME/(.*)\\..+$/$1/}",

        "\t",
        "\tVAR_INPUT",
        "\t\texecute : Bool;   //  Rising edge starts action once",      
        "\tEND_VAR",

        "\t",
        "\tVAR_OUTPUT",
        "\t\tdone : Bool;   //  TRUE: Commanded functionality has been completed successfully",
        "\t\tbusy : Bool;   //  TRUE: FB is not finished and new output values can be expected",
        "\t\terror : Bool;   //  TRUE: An error occurred during the execution of the FB",
        "\t\tstatus : Word := STATUS_NO_CALL;   //  WORD#16#0000 - WORD#16#7FFF: Status of the FB, WORD#16#8000 - WORD#16#FFFF: Error identification",
        "\tEND_VAR",

        "\t",
        "\tVAR",
        "\t\tstatExecuteOld : Bool;   //  Old value of 'execute' input for edge detection",
        "\t\tstatDone : Bool;   //  Static value for output 'done'",
        "\t\tstatBusy : Bool;   //  Static value for output 'busy'",
        "\t\tstatError : Bool;   //  Static value for output 'error'",
        "\t\tstatStatus : Word := STATUS_NO_CALL;   //  Static value for output 'status'",
        "\t\tstatFBState : DInt := FB_STATE_NO_PROCESSING;   //  State in the state machine of the FB",
        "\tEND_VAR",

        "\t",
        "\tVAR_TEMP",
        "\t\ttempExecute : Bool;   //  Temporary value for input 'execute'",        
        "\tEND_VAR",

        "\t",
        "\tVAR CONSTANT",
        "\t\tFB_STATE_NO_PROCESSING : DInt := 0;   //  FB state: No processing",
        "\t\tFB_STATE_PROCESSING_1 : DInt := 1;   //  FB state: Processing 1",
        "\t\tFB_STATE_PROCESSING_2 : DInt := 2;   //  FB state: Processing 2",
        "\t\tSTATUS_EXECUTION_FINISHED : Word := WORD#16#0000;   //  Execution finished without errors",
        "\t\tSTATUS_NO_CALL : Word := WORD#16#7000;   //  No job being currently processed",
        "\t\tSTATUS_FIRST_CALL : Word := WORD#16#7001;   //  First call after incoming new job (rising edge 'execute')",
        "\t\tSTATUS_SUBSEQUENT_CALL : Word := WORD#16#7002;   //  Subsequent call during active processing without further details",
        "\t\tERR_UNDEFINED_STATE : Word := WORD#16#8600;   //  Error: due to an undefined state in state machine",
        "\t\tERR_IN_BLOCK_OPERATION : Word := WORD#16#8001;   //  Error: Wrong operation of the function block",
        "\t\tERR_PARAMETRIZATION : Word := WORD#16#8200;   //  Error: during parameterization",
        "\t\tERR_PROCESSING_EXTERN : Word := WORD#16#8400;   //  Error: when processing from outside (e. g. wrong I/O signals, axis not referenced)",
        "\t\tERR_PROCESSING_INTERN : Word := WORD#16#8600;   //  Error: when processing internally (e. g. when calling a system function)",
        "\t\tERR_AREA_RESERVED : Word := WORD#16#8800;   //  Error: Reserved area",
        "\t\tERR_USER_DEFINED_CLASSES : Word := WORD#16#9000;   //  Error: User-defined error classes     ",
        "\tEND_VAR",

        "${C:",
        "\t//===============================================================================",
        "\t// (company) / (c)Copyright (year)",
        "\t//-------------------------------------------------------------------------------",
        "\t// Title:            (Title of this Block / Execute Template)",
        "\t// Comment/Function: (that is implemented in the block)",
        "\t//                   (Template for an FB with Execute / Busy / Done handling based on PLCopen standard 'Function Blocks for Motion Control' V2.0)",
        "\t// Library/Family:   (that the source is dedicated to)",
        "\t// Author:           (department / person in charge / contact)",
	    "\t// Tested with:      (test system with version)",
	    "\t// Engineering:      SIMATIC AX (SDK version)",
        "\t// Restrictions:     (OB types, etc.)",
        "\t// Requirements:     (hardware, technological package, memory needed, etc.)",
        "\t//-------------------------------------------------------------------------------",
        "\t// Change log table:",
        "\t// Version  | Date       | Expert in charge       | Changes applied",
        "\t//----------|------------|------------------------|------------------------------",
        "\t// 01.00.00 | yyyy-mm-dd | (name of expert)       | First released version",
        "\t//===============================================================================","}",

        "${C:",
        "  tempExecute := execute; // Work with temporary value / create process image",
        "    ",
        "  IF (tempExecute = TRUE) AND (statExecuteOld = FALSE) // Check if FB is triggered",
        "    // TODO(optional): delete next line and comment line if FB shall finish current job before new job can be started with rising edge of execute",
        "    AND (statStatus = STATUS_NO_CALL)",
        "  THEN // First call; initialize FB",
        "    statDone := FALSE;",
        "    statBusy := TRUE;",
        "    statError := FALSE;",
        "    statStatus := STATUS_FIRST_CALL;",
        "    // State machine - start processing",
        "    statFBState := FB_STATE_PROCESSING_1;",
        "    ",
        "    // TODO: Initialize functionality: reset of variables, diagnostics, etc.",
        "    ",
        "    // TODO: Initialize functionality: call subsidiary FBs with FALSE",
        "    //      instFB(execute := FALSE);",
        "    ",
        "  ELSIF (statStatus = STATUS_FIRST_CALL) THEN",
        "    statStatus := STATUS_SUBSEQUENT_CALL;",
        "  END_IF;",
        "  ",
        "  // Edge detection 'execute' input",
        "  statExecuteOld := tempExecute;",
        "",
        "  IF (statStatus = STATUS_NO_CALL) THEN // Nothing to do -> End here to reduce system load",
        "    RETURN;",
        "  END_IF;",
        "",
        "  CASE statFBState OF // State machine of FB",
        "    FB_STATE_NO_PROCESSING:",
        "        // No processing active (Note: this state must always be present and left empty)",
        "        ;",
        "      ",
        "    FB_STATE_PROCESSING_1: // Processing active",
        "        // TODO: Use this state for application specific code",
        "        // Call subsidiary FB or functionality",
        "        //          instFB(execute := TRUE);",
        "        //          IF (instFB.done = TRUE) THEN // Subsidiary FB finished successfully",
        "        //            statStatus := STATUS_EXECUTION_FINISHED; // Or continue processing with next state e.g. statFBState := FB_STATE_PROCESSING_2;",
        "        //",
        "        //          ELSIF (instFB.error = TRUE) THEN // Error occurred in subsidiary FB",
        "        //            // If the error occurred needs separate handling (e.g. close connection)",
        "        //            // please set the error output only when this error handling completed successfully",
        "        //            statStatus := ERR_XYZ; // Set correct status that identifies error clearly",
        "        //            // TODO: Error handling",
        "        //          END_IF;",
        "        ;",
        "      ",
        "    FB_STATE_PROCESSING_2: // Further processing state",
        "        // TODO: Use this state for further application specific code",
        "        ;",
        "      ",
        "    ELSE // Undefined state in state machine reached",
        "        statStatus := ERR_UNDEFINED_STATE;",
        "  END_CASE;",
        "",
        "  // Write outputs",
        "  IF (statStatus = STATUS_EXECUTION_FINISHED) AND (statDone = FALSE) THEN // Execution finished without errors",
        "      statDone := TRUE;",
        "      statBusy := FALSE;",
        "      statError := FALSE;",
        "      // execution aborted --> set state no processing",
        "      statFBState := FB_STATE_NO_PROCESSING;",
        "    ",
        "  ELSIF (statStatus.%X15 = TRUE) AND (statError = FALSE) THEN // Error occurred (statStatus is WORD#16#8000 to WORD#16#FFFF)",
        "      statDone := FALSE;",
        "      statBusy := FALSE;",
        "      statError := TRUE;",
        "      // execution aborted --> set state no processing",
        "      statFBState := FB_STATE_NO_PROCESSING;",
        "    ",
        "  ELSIF (tempExecute = FALSE) AND ((statDone = TRUE) OR (statError = TRUE)) THEN // Reset outputs",
        "      statDone := FALSE;",
        "      statBusy := FALSE;",
        "      statError := FALSE;",
        "      statStatus := STATUS_NO_CALL;",
        "      // TODO: Reset application specific outputs",
        "  END_IF;",
        "  ",
        "  done := statDone;",
        "  busy := statBusy;",
        "  error := statError;",
        "  status := statStatus;",
        "  // TODO: Write application specific static values to outputs",
        "}",

        "END_FUNCTION_BLOCK"         
    ],
    "description": "[PLCOPEN-SNIPPETS] FB with execute (Simple)"
    }
}